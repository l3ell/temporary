#!/bin/sh
# Gitプリコミットフック

# コミットしたユーザーの名前を取得
commit_user_name=$(git config --local user.name)
echo commit user: $commit_user_name

# 不許可ユーザによるコミットとして初期化
no_entry=1

# ユーザ名による検索を行う
while read line
do
    # コメント行削除
    line=${line%%#*}

    # 空白文字削除
    line=$(echo $line | sed -e 's/ *$//')

    # 空白行削除
    if [ -z "$line" ]; then
        continue
    fi

    # ファイル内に含まれるユーザならチェック終了
    if [ "$commit_user_name" = "$line" ]; then
        # The user can push to the branch.
        no_entry=0
        break
    fi
done < "shareHookScript/authorized_users"

if [ $no_entry = 1 ]; then
    echo 許可されていないユーザによるコミットです
    exit 1
else
    echo 許可ユーザによるコミットです
fi

# ステージされたファイルのリストを取得
staged_files=$(git diff --cached --name-only)
echo $staged_files
# 不許可パスへのコミットとして初期化
no_entry_path=0

# ユーザ名による検索を行う
while read line
do
    # コメント行削除
    line=${line%%#*}

    # 空白文字削除
    line=$(echo $line | sed -e 's/ *$//')

    # 空白行削除
    if [ -z "$line" ]; then
        continue
    fi
    echo $line
    # ファイル内に含まれるパスならチェック終了
    if echo "$staged_files" | grep -q "$line"; then
      no_entry_path=1
      break
    fi
done < "shareHookScript/protect_paths"

if [ $no_entry_path = 1 ]; then
    echo 許可されていないパスへのコミットです
    echo $line
    exit 1
else
    echo 許可されたパスへのコミットです
fi

exit 1

# コミットしたユーザーの名前を取得
commit_user_name=$(git log -1 --format='%an')
chk_name="testUser"

# 条件をチェック
if [ "$commit_user_name" == "$chk_name" ]; then
  echo "name 一致しました"
  echo "chk_name: $chk_name"
  echo "Committing user name: $commit_user_name"
else
  echo "条件を満たしていません。"
  echo "chk_name: $chk_name"
  echo "Committing user name: $commit_user_name"
  exit 1  # コミットを中止
fi

# 現在のブランチ名を取得
current_branch=$(git symbolic-ref --short HEAD)
chk_branch="Develop"

# 条件をチェック
if [ "$current_branch" == "$chk_branch" ]; then
  echo "branch 一致しました"
  echo "chk_branch: $chk_branch"
  echo "Current branch: $current_branch"
else
  echo "条件を満たしていません。"
  echo "chk_branch: $chk_branch"
  echo "Current branch: $current_branch"
  exit 1  # コミットを中止
fi

# ステージされたファイルのリストを取得
staged_files=$(git diff --cached --name-only)
chk_files="^src/"

# ステージされたファイルに"src"ディレクトリが含まれているか確認
if echo "$staged_files" | grep -q "$chk_files"; then
  echo "条件を満たしています。"
  echo "$staged_files"
else
  echo "条件を満たしていません。"
  exit 1  # コミットを中止
fi

# 必ず中断する
exit 1

#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
