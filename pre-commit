#!/bin/sh
#!/bin/sh
# Gitプリコミットフック


# コミットしたユーザーの名前を取得
commit_user_name=$(git log -1 --format='%an')

# 現在のブランチ名を取得
current_branch=$(git symbolic-ref --short HEAD)

# ステージされたファイルのリストを取得
staged_files=$(git diff --cached --name-only)

# 条件をチェック
if [[ "$commit_user_name" == "testUser" && "$current_branch" == "Develop" ]]; then
  # ステージされたファイルに"src"ディレクトリが含まれているか確認
  if echo "$staged_files" | grep -q "^src/"; then
    echo "条件を満たしています。"
  else
    echo "条件を満たしていません。"
    exit 1  # コミットを中止
  fi
else
  echo "条件を満たしていません。"
  exit 1  # コミットを中止
fi

# コミットしたユーザーの名前を取得
commit_user_name=$(git log -1 --format='%an')

# コミットしたユーザーのメールアドレスを取得
commit_user_email=$(git log -1 --format='%ae')

# コミットしたユーザーの名前とメールアドレスを表示
echo "Committing user name: $commit_user_name"
echo "Committing user email: $commit_user_email"

# ステージされたファイルのリストを取得
staged_files=$(git diff --cached --name-only)

# フォルダパスを取得
for file in $staged_files
do
  # ファイルのディレクトリパスを抽出
  dir_path=$(dirname "$file")
  
  # デコードしたディレクトリパスを表示
  echo "File path: $dir_path"
done

# リポジトリのルートパスを取得
repo_root=$(git rev-parse --show-toplevel)

echo "Repository root: $repo_root"

# 現在のブランチ名を取得
current_branch=$(git symbolic-ref --short HEAD)



# ブランチ名からブランチの種別を判定
if [[ "$current_branch" == "main" ]]; then
  branch_type="Main Branch"
elif [[ "$current_branch" == "master" ]]; then
  branch_type="Master Branch"
elif [[ "$current_branch" == feature/* ]]; then
  branch_type="Feature Branch"
elif [[ "$current_branch" == release/* ]]; then
  branch_type="Release Branch"
else
  branch_type="Other Branch"
fi

echo "Current branch: $current_branch"
echo "Branch type: $branch_type"



#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
